diff --git a/src/app.js b/src/app.js
index b53543d..5d0e67f 100644
--- a/src/app.js
+++ b/src/app.js
@@ -3,8 +3,6 @@ const path = require('path');
 const viewRoutes = require('./routes/view.routes');
 const apiRoutes = require('./routes/api.routes');
 const { sessionMiddleware, attachUser } = require('./middleware/auth');
-const userRoutes = require('./routes/user.routes');
-const authXRoutes = require('./routes/authX.routes');
 
 const app = express();
 
@@ -24,7 +22,6 @@ app.use((req, res, next) => {
 
 app.use(express.json());
 
-app.use('/api/auth/x', authXRoutes);
 app.use('/', viewRoutes);
 app.use('/api', apiRoutes);
 
diff --git a/src/controllers/authX.controller.js b/src/controllers/authX.controller.js
index dd254f4..c849d9f 100644
--- a/src/controllers/authX.controller.js
+++ b/src/controllers/authX.controller.js
@@ -1,11 +1,10 @@
 const crypto = require('crypto');
-const axios = require('axios');
 const User = require('../models/User');
 
 const b64url = (buf) => buf.toString('base64').replace(/\+/g,'-').replace(/\//g,'_').replace(/=+$/,'');
 
-exports.start = (req, res) => {
-  req.session.afterX = req.query.redirect || '/settings';
+const start = (req, res) => {
+  req.session.afterX = req.query.redirect || '/x-auth';
 
   const codeVerifier = b64url(crypto.randomBytes(32));
   const codeChallenge = b64url(crypto.createHash('sha256').update(codeVerifier).digest());
@@ -26,7 +25,7 @@ exports.start = (req, res) => {
   res.redirect(`https://twitter.com/i/oauth2/authorize?${params.toString()}`);
 };
 
-exports.callback = async (req, res) => {
+const callback = async (req, res) => {
   try {
     const { code, state } = req.query;
     const pkce = req.session.xPkce;
@@ -50,20 +49,25 @@ exports.callback = async (req, res) => {
       `${process.env.X_CLIENT_ID}:${process.env.X_CLIENT_SECRET}`
     ).toString('base64');
 
-    const tokenRes = await axios.post(
+    const tokenRes = await fetch(
       'https://api.twitter.com/2/oauth2/token',
-      body.toString(),
       {
+        method: 'POST',
         headers: {
           'Content-Type': 'application/x-www-form-urlencoded',
           'Authorization': `Basic ${authHeader}`
-        }
+        },
+        body: body.toString()
       }
     );
 
-    const data = tokenRes.data;
+    if (!tokenRes.ok) {
+      throw new Error(`HTTP error! status: ${tokenRes.status}`);
+    }
+
+    const data = await tokenRes.json();
 
-    await User.findByIdAndUpdate(req.session.user._id, {
+    const updatedUser = await User.findByIdAndUpdate(req.session.user._id, {
       $set: {
         xAuth: {
           accessToken: data.access_token,
@@ -74,16 +78,48 @@ exports.callback = async (req, res) => {
           connectedAt: new Date()
         }
       }
-    });
+    }, { new: true });
+
+    req.session.user = updatedUser.toObject();
 
-    const back = req.session.afterX || '/settings';
+    const back = req.session.afterX || '/x-auth';
     delete req.session.xPkce;
     delete req.session.afterX;
 
     return res.redirect(back);
   } catch (err) {
-    console.error('X OAuth callback error:', err.response?.data || err.message);
+    console.error('X OAuth callback error:', err.message);
     return res.status(500).send('X auth failed');
   }
 };
 
+const disconnect = async (req, res) => {
+  try {
+    if (!req.session?.user?._id) {
+      return res.status(401).send('Not authenticated');
+    }
+
+    const updatedUser = await User.findByIdAndUpdate(req.session.user._id, {
+      $unset: {
+        xAuth: 1
+      }
+    }, { new: true });
+
+    req.session.user = updatedUser.toObject();
+
+    const back = req.query.redirect || '/x-auth';
+    res.redirect(back);
+  } catch (err) {
+    console.error('X disconnect error:', err.message);
+    return res.status(500).send('X disconnect failed');
+  }
+};
+
+const maybeHandleXCallback = (req, res, next) => {
+  if (req.query && req.query.code) {
+    return callback(req, res, next);
+  }
+  next();
+};
+
+module.exports = { start, callback, disconnect, maybeHandleXCallback };
diff --git a/src/controllers/post.controller.js b/src/controllers/post.controller.js
index e41617b..12d5645 100644
--- a/src/controllers/post.controller.js
+++ b/src/controllers/post.controller.js
@@ -1,6 +1,5 @@
 const postService = require('../services/post.service');
 const { parseUploadedFiles } = require('../utils/mediaParser');
-const axios = require('axios');
 const User = require('../models/User');
 
 const createPost = async (req, res) => {
@@ -10,7 +9,7 @@ const createPost = async (req, res) => {
 
     const newPost = await postService.createPost({
       content,
-      author: req.user._id,        
+      author: req.user._id,
       groupId: groupId || null,
       media,
     });
@@ -20,14 +19,23 @@ const createPost = async (req, res) => {
 
       if (user?.xAuth?.accessToken) {
         try {
-          await axios.post(
+          const tweetResponse = await fetch(
             'https://api.twitter.com/2/tweets',
-            { text: content.slice(0, 280) }, 
-            { headers: { Authorization: `Bearer ${user.xAuth.accessToken}` } }
+            {
+              method: 'POST',
+              headers: {
+                'Authorization': `Bearer ${user.xAuth.accessToken}`,
+                'Content-Type': 'application/json'
+              },
+              body: JSON.stringify({ text: content.slice(0, 280) })
+            }
           );
+
+          if (!tweetResponse.ok) {
+            throw new Error(`HTTP error! status: ${tweetResponse.status}`);
+          }
         } catch (err) {
-          console.error('Failed to share on X:', err.response?.data || err.message);
-          
+          console.error('Failed to share on X:', err.message);
         }
       } else {
         console.warn('User not connected to X â€” skipping share');
diff --git a/src/controllers/view.controller.js b/src/controllers/view.controller.js
index 724db2c..74ca3ba 100644
--- a/src/controllers/view.controller.js
+++ b/src/controllers/view.controller.js
@@ -197,12 +197,30 @@ const renderHistory = async (req, res) => {
     }
 };
 
+const renderXAuth = async (req, res) => {
+    try {
+        const User = require('../models/User');
+        const user = await User.findById(req.session.user._id);
+
+        if (!user) {
+            return res.status(404).render('error', {
+                message: 'User not found'
+            });
+        }
+
+        res.render('x-auth', { user });
+    } catch (err) {
+        console.error('Error rendering X auth page:', err.message);
+        res.status(500).render('error', {
+            message: 'Failed to load X authentication page. Please try again later.'
+        });
+    }
+};
+
 module.exports = {
     renderSignup,
     renderLogin,
     renderRoot,
-    renderErrorTest,
-    renderHistory,
     renderHome,
     renderMyPosts,
     renderGroup,
@@ -214,5 +232,8 @@ module.exports = {
     searchUsersView,
     searchGroupsView,
     searchPostsView,
-    renderUsersMap
+    renderUsersMap,
+    renderErrorTest,
+    renderHistory,
+    renderXAuth
 };
diff --git a/src/public/styles/x-auth.css b/src/public/styles/x-auth.css
new file mode 100644
index 0000000..6065095
--- /dev/null
+++ b/src/public/styles/x-auth.css
@@ -0,0 +1,101 @@
+.x-auth-container {
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    justify-content: center;
+    min-height: 80vh;
+    padding: 2rem;
+    max-width: 500px;
+    margin: 0 auto;
+}
+
+.x-auth-card {
+    background: rgba(255, 255, 255, 0.1);
+    backdrop-filter: blur(10px);
+    border-radius: 20px;
+    padding: 3rem;
+    text-align: center;
+    border: 1px solid rgba(255, 255, 255, 0.2);
+    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
+    width: 100%;
+}
+
+.x-logo {
+    font-size: 4rem;
+    margin-bottom: 1rem;
+    color: #1DA1F2;
+}
+
+.x-auth-title {
+    font-size: 2rem;
+    margin-bottom: 1rem;
+    color: #333;
+}
+
+.x-auth-description {
+    font-size: 1.1rem;
+    margin-bottom: 2rem;
+    color: #666;
+    line-height: 1.6;
+}
+
+.x-button {
+    margin: 0.5rem;
+    min-width: 200px;
+}
+
+.x-button.disconnect-button {
+    background-color: #dc2626;
+}
+
+.x-link {
+    color: white;
+    text-decoration: none;
+    display: block;
+    width: 100%;
+    height: 100%;
+    padding: 12px 24px;
+}
+
+.x-link:hover {
+    color: white;
+    text-decoration: none;
+}
+
+.connection-status {
+    background: rgba(0, 255, 0, 0.1);
+    border: 1px solid rgba(0, 255, 0, 0.3);
+    border-radius: 10px;
+    padding: 1rem;
+    margin-bottom: 2rem;
+    color: #4ade80;
+}
+
+.disconnect-warning {
+    background: rgba(255, 255, 0, 0.1);
+    border: 1px solid rgba(255, 255, 0, 0.3);
+    border-radius: 10px;
+    padding: 1rem;
+    margin-bottom: 2rem;
+    color: #fbbf24;
+    font-size: 0.9rem;
+}
+
+.back-link {
+    position: absolute;
+    top: 2rem;
+    left: 2rem;
+    color: #333;
+    text-decoration: none;
+    font-size: 1.1rem;
+}
+
+.back-link:hover {
+    color: #007bff;
+}
+
+.security-note {
+    margin-top: 2rem;
+    font-size: 0.9rem;
+    color: #666;
+}
diff --git a/src/routes/auth.routes.js b/src/routes/auth.routes.js
index b061f30..b260700 100644
--- a/src/routes/auth.routes.js
+++ b/src/routes/auth.routes.js
@@ -1,10 +1,15 @@
 const express = require('express');
 const router = express.Router();
 const authController = require('../controllers/auth.controller');
+const authXController = require('../controllers/authX.controller');
 const { isLoggedIn, isLoggedOut } = require('../middleware/auth');
 
 router.post('/register', isLoggedOut, authController.register);
 router.post('/login', isLoggedOut, authController.login);
 router.post('/logout', isLoggedIn, authController.logout);
 
+router.get('/x/start', isLoggedIn, authXController.start);
+router.get('/x/callback', isLoggedIn, authXController.callback);
+router.get('/x/disconnect', isLoggedIn, authXController.disconnect);
+
 module.exports = router;
diff --git a/src/routes/authX.routes.js b/src/routes/authX.routes.js
deleted file mode 100644
index 4d6996f..0000000
--- a/src/routes/authX.routes.js
+++ /dev/null
@@ -1,8 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const authXController = require('../controllers/authX.controller');
-
-router.get('/start', authXController.start);
-router.get('/callback', authXController.callback);
-
-module.exports = router;
diff --git a/src/routes/view.routes.js b/src/routes/view.routes.js
index 91bca0d..4c7c01f 100644
--- a/src/routes/view.routes.js
+++ b/src/routes/view.routes.js
@@ -6,16 +6,9 @@ const userController = require('../controllers/user.controller');
 const statisticsController = require('../controllers/statistics.controller');
 const authXController = require('../controllers/authX.controller');
 
-function maybeHandleXCallback(req, res, next) {
-  if (req.query && req.query.code) {
-    return authXController.callback(req, res, next);
-  }
-  next();
-}
-
 router.get('/signup', viewController.renderSignup);
 router.get('/login', viewController.renderLogin);
-router.get('/', maybeHandleXCallback, viewController.renderRoot);
+router.get('/', authXController.maybeHandleXCallback, viewController.renderRoot);
 router.get('/home', isLoggedIn, viewController.renderHome);
 router.get('/history', isLoggedIn, viewController.renderHistory);
 router.get('/error-test', viewController.renderErrorTest);
@@ -32,6 +25,6 @@ router.get('/statistics', isLoggedIn, statisticsController.renderStatisticsPage)
 router.get('/search/groups', isLoggedIn, viewController.searchGroupsView);
 router.get('/search/posts', isLoggedIn, viewController.searchPostsView);
 router.get('/map', isLoggedIn, viewController.renderUsersMap);
-
+router.get('/x-auth', isLoggedIn, viewController.renderXAuth);
 
 module.exports = router;
diff --git a/src/views/partials/navbar.ejs b/src/views/partials/navbar.ejs
index a9f9f60..91f02c9 100644
--- a/src/views/partials/navbar.ejs
+++ b/src/views/partials/navbar.ejs
@@ -34,6 +34,7 @@
         <a href="/history" class="glass-button"><i class="bi bi-clock-history"></i>History</a>
         <a href="/statistics" class="glass-button"><i class="bi bi-graph-up"></i>Statistics</a>
         <a href="/create-group" class="glass-button"><i class="bi bi-people-fill"></i>Create Group</a>
+        <a href="/x-auth" class="glass-button"><i class="bi bi-twitter-x"></i>X Integration</a>
     </div>
 
     <div class="navbar-user">
diff --git a/src/views/settings.ejs b/src/views/settings.ejs
index 28dcd87..8f725ce 100644
--- a/src/views/settings.ejs
+++ b/src/views/settings.ejs
@@ -63,10 +63,6 @@
     <button type="button" id="delete-account-button" class="glass-button delete-button" data-userid="<%= user._id %>">
         Delete Account
     </button>
-   
-    <div>
-        <button class="glass-button x-button"><a class="x-link" href="/api/auth/x/start?redirect=/settings">Connect X</a></button>
-    </div>
 
 </main>
 
diff --git a/src/views/x-auth.ejs b/src/views/x-auth.ejs
new file mode 100644
index 0000000..de3bb55
--- /dev/null
+++ b/src/views/x-auth.ejs
@@ -0,0 +1,66 @@
+<!DOCTYPE html>
+<html>
+<head>
+    <title>X (Twitter) Authentication</title>
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
+    <link rel="stylesheet" href="/styles/global.css">
+    <link rel="stylesheet" href="/styles/toast.css">
+    <link rel="stylesheet" href="/styles/x-auth.css">
+</head>
+<body>
+    <a href="/settings" class="back-link">
+        <i class="bi bi-arrow-left"></i> Back to Settings
+    </a>
+
+    <main class="x-auth-container">
+        <div class="x-auth-card">
+            <div class="x-logo">
+                <i class="bi bi-twitter-x"></i>
+            </div>
+
+            <h1 class="x-auth-title">X (Twitter) Integration</h1>
+
+            <% if (user.xAuth && user.xAuth.accessToken) { %>
+                <div class="connection-status">
+                    <i class="bi bi-check-circle-fill"></i>
+                    <strong>Connected to X</strong><br>
+                    <small>Connected on <%= new Date(user.xAuth.connectedAt).toLocaleDateString() %></small>
+                </div>
+
+                <p class="x-auth-description">
+                    Your account is connected to X. You can now share your posts directly to your X timeline.
+                </p>
+
+                <div class="disconnect-warning">
+                    <i class="bi bi-exclamation-triangle-fill"></i>
+                    Disconnecting will remove the ability to share posts to X automatically.
+                </div>
+
+                <button class="glass-button x-button disconnect-button">
+                    <a class="x-link" href="/api/auth/x/disconnect?redirect=/x-auth">
+                        <i class="bi bi-unlink"></i> Disconnect from X
+                    </a>
+                </button>
+            <% } else { %>
+                <p class="x-auth-description">
+                    Connect your X (Twitter) account to automatically share your posts to your X timeline.
+                    This will allow you to cross-post your content seamlessly.
+                </p>
+
+                <button class="glass-button x-button">
+                    <a class="x-link" href="/api/auth/x/start?redirect=/x-auth">
+                        <i class="bi bi-twitter-x"></i> Connect to X
+                    </a>
+                </button>
+
+                <p class="security-note">
+                    <i class="bi bi-shield-check"></i>
+                    Your data is secure. We only request permission to post tweets on your behalf.
+                </p>
+            <% } %>
+        </div>
+    </main>
+
+    <script src="/js/toast.js" defer></script>
+</body>
+</html>
